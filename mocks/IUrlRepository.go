// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	models "github.com/Jagadwp/link-easy-go/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// IUrlRepository is an autogenerated mock type for the IUrlRepository type
type IUrlRepository struct {
	mock.Mock
}

// CreateUrl provides a mock function with given fields: url
func (_m *IUrlRepository) CreateUrl(url *models.Url) (*models.Url, error) {
	ret := _m.Called(url)

	var r0 *models.Url
	if rf, ok := ret.Get(0).(func(*models.Url) *models.Url); ok {
		r0 = rf(url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Url)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Url) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUrl provides a mock function with given fields: url
func (_m *IUrlRepository) DeleteUrl(url *models.Url) (*models.Url, error) {
	ret := _m.Called(url)

	var r0 *models.Url
	if rf, ok := ret.Get(0).(func(*models.Url) *models.Url); ok {
		r0 = rf(url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Url)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Url) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUrlById provides a mock function with given fields: id
func (_m *IUrlRepository) GetUrlById(id int) (*models.Url, error) {
	ret := _m.Called(id)

	var r0 *models.Url
	if rf, ok := ret.Get(0).(func(int) *models.Url); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Url)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUrlByShortLink provides a mock function with given fields: shortLink
func (_m *IUrlRepository) GetUrlByShortLink(shortLink string) (*models.Url, error) {
	ret := _m.Called(shortLink)

	var r0 *models.Url
	if rf, ok := ret.Get(0).(func(string) *models.Url); ok {
		r0 = rf(shortLink)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Url)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(shortLink)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUrlsByUserID provides a mock function with given fields: userID
func (_m *IUrlRepository) GetUrlsByUserID(userID int) (*[]models.Url, error) {
	ret := _m.Called(userID)

	var r0 *[]models.Url
	if rf, ok := ret.Get(0).(func(int) *[]models.Url); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.Url)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUrlsByUsername provides a mock function with given fields: username
func (_m *IUrlRepository) GetUrlsByUsername(username string) (*[]models.Url, error) {
	ret := _m.Called(username)

	var r0 *[]models.Url
	if rf, ok := ret.Get(0).(func(string) *[]models.Url); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.Url)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncrementHitCounter provides a mock function with given fields: url
func (_m *IUrlRepository) IncrementHitCounter(url *models.Url) (*models.Url, error) {
	ret := _m.Called(url)

	var r0 *models.Url
	if rf, ok := ret.Get(0).(func(*models.Url) *models.Url); ok {
		r0 = rf(url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Url)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Url) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUrl provides a mock function with given fields: url
func (_m *IUrlRepository) UpdateUrl(url *models.Url) (*models.Url, error) {
	ret := _m.Called(url)

	var r0 *models.Url
	if rf, ok := ret.Get(0).(func(*models.Url) *models.Url); ok {
		r0 = rf(url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Url)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Url) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIUrlRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewIUrlRepository creates a new instance of IUrlRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIUrlRepository(t mockConstructorTestingTNewIUrlRepository) *IUrlRepository {
	mock := &IUrlRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
